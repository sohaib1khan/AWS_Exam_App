[
  {
    "id": 13,
    "front": "What are the four domains of the AWS Developer Associate DVA-C02 exam and their percentages?",
    "back": "Domain 1: Development with AWS Services (32%), Domain 2: Security (26%), Domain 3: Deployment (24%), Domain 4: Troubleshooting and Optimization (18%)",
    "category": "Exam Info",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T18:00:00.000000",
    "created_by": "admin"
  },
  {
    "id": 14,
    "front": "What is the maximum timeout for AWS Lambda functions?",
    "back": "15 minutes (900 seconds). If your function needs to run longer, consider using AWS Batch, ECS, or Step Functions for orchestration.",
    "category": "Compute",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T18:01:00.000000",
    "created_by": "admin"
  },
  {
    "id": 15,
    "front": "What is the difference between synchronous and asynchronous Lambda invocations?",
    "back": "Synchronous (push): Client waits for response, used with API Gateway, ALB, CLI. Asynchronous (event): Client doesn't wait, used with S3, SNS, CloudWatch Events. Async supports retry logic and DLQ (Dead Letter Queues).",
    "category": "Compute",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:02:00.000000",
    "created_by": "admin"
  },
  {
    "id": 16,
    "front": "What is DynamoDB and what are its two consistency models?",
    "back": "DynamoDB is a fully managed NoSQL database. Two consistency models: Eventually Consistent Reads (default, may not reflect recent writes) and Strongly Consistent Reads (always returns most up-to-date data, consumes more RCU).",
    "category": "Database",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:03:00.000000",
    "created_by": "admin"
  },
  {
    "id": 17,
    "front": "What are DynamoDB Global Secondary Indexes (GSI) vs Local Secondary Indexes (LSI)?",
    "back": "GSI: Different partition key, can be created after table creation, has its own RCU/WCU. LSI: Same partition key but different sort key, must be created at table creation, shares RCU/WCU with main table, 10GB limit per partition.",
    "category": "Database",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:04:00.000000",
    "created_by": "admin"
  },
  {
    "id": 18,
    "front": "What is Amazon API Gateway and what are its three types?",
    "back": "API Gateway is a managed service to create, publish, and secure APIs. Three types: REST API (feature-rich), HTTP API (faster, cheaper, fewer features), WebSocket API (real-time bidirectional communication).",
    "category": "Networking",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:05:00.000000",
    "created_by": "admin"
  },
  {
    "id": 19,
    "front": "What are the API Gateway caching options and how do you invalidate cache?",
    "back": "Caching available for REST APIs (not HTTP APIs) with TTL 0-3600 seconds. Cache can be invalidated by: Cache-Control: max-age=0 header (requires proper IAM permissions), or manually in console. Caching improves performance and reduces backend calls.",
    "category": "Networking",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:06:00.000000",
    "created_by": "admin"
  },
  {
    "id": 20,
    "front": "What is AWS CodeCommit?",
    "back": "AWS CodeCommit is a fully managed Git-based source control service. It provides secure, scalable, and highly available Git repositories. Integrates with other AWS DevOps services and supports standard Git functionality.",
    "category": "Developer Tools",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T18:07:00.000000",
    "created_by": "admin"
  },
  {
    "id": 21,
    "front": "What is the difference between CodeBuild and CodeDeploy?",
    "back": "CodeBuild: Fully managed build service that compiles source code, runs tests, and produces deployment packages. CodeDeploy: Deployment service that automates application deployments to EC2, Lambda, ECS, or on-premises servers.",
    "category": "Developer Tools",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:08:00.000000",
    "created_by": "admin"
  },
  {
    "id": 22,
    "front": "What are the CodeDeploy deployment configurations for EC2?",
    "back": "AllAtOnce: Deploy to all instances simultaneously (fastest, but no availability during deployment). AllAtOnceHalf: Deploy to half instances at a time. OneAtATime: Deploy to one instance at a time (slowest, but maintains availability).",
    "category": "Developer Tools",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:09:00.000000",
    "created_by": "admin"
  },
  {
    "id": 23,
    "front": "What is the difference between blue/green and rolling deployments?",
    "back": "Blue/Green: Two identical environments, traffic switched instantly from blue (current) to green (new). Quick rollback, zero downtime, but more expensive. Rolling: Gradual replacement of instances. Slower, less resource-intensive, but rollback is more complex.",
    "category": "Deployment",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:10:00.000000",
    "created_by": "admin"
  },
  {
    "id": 24,
    "front": "What is AWS Elastic Beanstalk and what deployment policies does it support?",
    "back": "Elastic Beanstalk is a PaaS for deploying applications. Deployment policies: All at once, Rolling, Rolling with additional batch, Immutable (safest), Blue/Green (via swap URLs). It handles capacity provisioning, load balancing, auto-scaling, and health monitoring.",
    "category": "Compute",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:11:00.000000",
    "created_by": "admin"
  },
  {
    "id": 25,
    "front": "What is Amazon SQS and what's the difference between Standard and FIFO queues?",
    "back": "SQS is a message queuing service. Standard: Unlimited throughput, at-least-once delivery, best-effort ordering. FIFO: Up to 300 TPS (3000 with batching), exactly-once processing, preserves message order, requires .fifo suffix.",
    "category": "Application Integration",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:12:00.000000",
    "created_by": "admin"
  },
  {
    "id": 26,
    "front": "What is SQS Dead Letter Queue (DLQ) and when should you use it?",
    "back": "DLQ receives messages that fail to be processed after the maximum number of receive attempts. Use for: debugging failed messages, isolating poison messages, and triggering alerts. Set redrive policy with maxReceiveCount to control when messages move to DLQ.",
    "category": "Application Integration",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:13:00.000000",
    "created_by": "admin"
  },
  {
    "id": 27,
    "front": "What is Amazon SNS and what protocols does it support?",
    "back": "SNS is a pub/sub messaging service. Supported protocols: HTTP/HTTPS endpoints, Email/Email-JSON, SMS, SQS, Lambda functions, mobile push notifications (iOS, Android). One message can be delivered to multiple subscribers.",
    "category": "Application Integration",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T18:14:00.000000",
    "created_by": "admin"
  },
  {
    "id": 28,
    "front": "What is the SNS + SQS fan-out pattern?",
    "back": "Pattern where SNS topic delivers the same message to multiple SQS queues. Benefits: Fully decoupled, no data loss, SQS provides persistence and retry logic, can add more subscribers later without changing publishers. Common for microservices architecture.",
    "category": "Application Integration",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:15:00.000000",
    "created_by": "admin"
  },
  {
    "id": 29,
    "front": "What are the different types of Amazon Kinesis services?",
    "back": "Kinesis Data Streams: Real-time data streaming with shards. Kinesis Data Firehose: Load streaming data into data stores (S3, Redshift, Elasticsearch). Kinesis Analytics: Real-time analytics on streaming data. Kinesis Video Streams: Streaming video data.",
    "category": "Analytics",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:16:00.000000",
    "created_by": "admin"
  },
  {
    "id": 30,
    "front": "What is Amazon CloudWatch and what are its main components?",
    "back": "CloudWatch is AWS monitoring service. Components: Metrics (performance data), Logs (log file monitoring), Events/EventBridge (respond to AWS events), Alarms (trigger actions based on metrics), Dashboards (visual monitoring), X-Ray integration for tracing.",
    "category": "Monitoring",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T18:17:00.000000",
    "created_by": "admin"
  },
  {
    "id": 31,
    "front": "What is AWS X-Ray and what are its main concepts?",
    "back": "X-Ray is a distributed tracing service. Concepts: Trace (request journey), Segment (work done by service), Subsegment (work done by downstream service), Annotation (key-value pairs for indexing), Metadata (key-value pairs for details), Service Map (visual representation).",
    "category": "Monitoring",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:18:00.000000",
    "created_by": "admin"
  },
  {
    "id": 32,
    "front": "How do you enable X-Ray tracing for Lambda functions?",
    "back": "Two ways: 1) Enable in Lambda configuration (Environment variables section), 2) Add X-Ray SDK to your code. For API Gateway: enable in stage settings. Set _X_AMZN_TRACE_ID environment variable. Use AWSXRayDaemonWriteAccess policy for Lambda execution role.",
    "category": "Monitoring",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:19:00.000000",
    "created_by": "admin"
  },
  {
    "id": 33,
    "front": "What is IAM and what are the main identity types?",
    "back": "IAM (Identity and Access Management) controls access to AWS services. Identity types: Users (for people/applications), Groups (collection of users), Roles (for AWS services/cross-account access), Policies (define permissions using JSON).",
    "category": "Security",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T18:20:00.000000",
    "created_by": "admin"
  },
  {
    "id": 34,
    "front": "When should you use IAM Roles vs IAM Users?",
    "back": "Use Roles for: EC2 instances, Lambda functions, temporary access, cross-account access, service-to-service communication. Use Users for: Individual people, long-term programmatic access, service accounts that need permanent credentials. Roles are more secure for AWS services.",
    "category": "Security",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:21:00.000000",
    "created_by": "admin"
  },
  {
    "id": 35,
    "front": "What is the principle of least privilege in IAM?",
    "back": "Grant only the minimum permissions necessary for a user/service to perform their function. Start with no permissions and add specific permissions as needed. Regularly review and audit permissions. Use managed policies when possible, custom policies when specific control needed.",
    "category": "Security",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:22:00.000000",
    "created_by": "admin"
  },
  {
    "id": 36,
    "front": "What is Amazon Cognito and what are its two main services?",
    "back": "Cognito provides authentication and authorization for web/mobile apps. Two services: User Pools (user directory for sign-up/sign-in with features like MFA, social logins) and Identity Pools (provide AWS credentials to authenticated/guest users).",
    "category": "Security",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:23:00.000000",
    "created_by": "admin"
  },
  {
    "id": 37,
    "front": "What is AWS KMS and what are the different types of keys?",
    "back": "KMS (Key Management Service) manages encryption keys. Key types: AWS Managed Keys (free, managed by AWS), Customer Managed Keys (you control key policy, rotation), Customer Provided Keys (you provide key material). KMS keys are regional.",
    "category": "Security",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:24:00.000000",
    "created_by": "admin"
  },
  {
    "id": 38,
    "front": "What is the difference between encryption at rest and encryption in transit?",
    "back": "Encryption at rest: Data encrypted when stored (S3, EBS, RDS). Uses AES-256 typically. Encryption in transit: Data encrypted when moving between services/over network. Uses TLS/SSL. Both can be used together for comprehensive security.",
    "category": "Security",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T18:25:00.000000",
    "created_by": "admin"
  },
  {
    "id": 39,
    "front": "What is AWS Secrets Manager vs Systems Manager Parameter Store?",
    "back": "Secrets Manager: Automatic rotation, versioning, cross-account access, designed for secrets like DB passwords. Higher cost. Parameter Store: Simple key-value store, hierarchical organization, can store secrets (SecureString) but no automatic rotation. Lower cost.",
    "category": "Security",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:26:00.000000",
    "created_by": "admin"
  },
  {
    "id": 40,
    "front": "What is Amazon S3 and what are its storage classes?",
    "back": "S3 is object storage with 99.999999999% (11 9's) durability. Storage classes: Standard, Intelligent-Tiering, Standard-IA, One Zone-IA, Glacier Instant Retrieval, Glacier Flexible Retrieval, Glacier Deep Archive. Each optimized for different access patterns and costs.",
    "category": "Storage",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:27:00.000000",
    "created_by": "admin"
  },
  {
    "id": 41,
    "front": "What are S3 presigned URLs and when would you use them?",
    "back": "Presigned URLs allow temporary access to S3 objects without AWS credentials. Use cases: Allow users to upload/download files directly to/from S3, time-limited access to private objects, avoiding proxy through your application. Can set expiration time and permissions.",
    "category": "Storage",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:28:00.000000",
    "created_by": "admin"
  },
  {
    "id": 42,
    "front": "What are S3 event notifications and what services can receive them?",
    "back": "S3 can send notifications when events occur (object created, deleted, etc.). Destinations: SNS topics, SQS queues, Lambda functions. Events: s3:ObjectCreated, s3:ObjectRemoved, s3:ObjectRestore, s3:Replication. Configure using event notifications or EventBridge.",
    "category": "Storage",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:29:00.000000",
    "created_by": "admin"
  },
  {
    "id": 43,
    "front": "What is Amazon ECS and what are its launch types?",
    "back": "ECS (Elastic Container Service) is a container orchestration service. Launch types: EC2 (you manage instances), Fargate (serverless, AWS manages infrastructure). Both support task definitions, services, clusters, and load balancer integration.",
    "category": "Containers",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:30:00.000000",
    "created_by": "admin"
  },
  {
    "id": 44,
    "front": "What is AWS Fargate and what are its benefits?",
    "back": "Fargate is serverless compute for containers (ECS and EKS). Benefits: No server management, automatic scaling, pay per task, built-in security, faster deployment. Ideal for applications with variable workloads or when you want to focus on application logic.",
    "category": "Containers",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T18:31:00.000000",
    "created_by": "admin"
  },
  {
    "id": 45,
    "front": "What is AWS SAM (Serverless Application Model)?",
    "back": "SAM is an open-source framework for building serverless applications. Extends CloudFormation with simplified syntax for Lambda, API Gateway, DynamoDB. Commands: sam build, sam deploy, sam local start-api (local testing). Uses template.yaml for infrastructure as code.",
    "category": "Developer Tools",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:32:00.000000",
    "created_by": "admin"
  },
  {
    "id": 46,
    "front": "What is AWS Step Functions and what are its workflow types?",
    "back": "Step Functions coordinates multiple AWS services into serverless workflows. Workflow types: Standard (long-running, exactly-once execution), Express (short-duration, high-volume, at-least-once). Use JSON-based Amazon States Language to define state machines.",
    "category": "Application Integration",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:33:00.000000",
    "created_by": "admin"
  },
  {
    "id": 47,
    "front": "What are the different Step Functions state types?",
    "back": "Pass (pass input to output), Task (do work), Choice (branching logic), Wait (delay execution), Succeed (successful termination), Fail (failure termination), Parallel (parallel execution), Map (process array items). Each state has specific JSON configuration.",
    "category": "Application Integration",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:34:00.000000",
    "created_by": "admin"
  },
  {
    "id": 48,
    "front": "What is Amazon CloudFront and what are its origins?",
    "back": "CloudFront is a CDN (Content Delivery Network) that delivers content with low latency. Origins: S3 buckets, HTTP servers (ALB, EC2, on-premises), MediaStore, MediaPackage. Caches content at edge locations worldwide for faster delivery.",
    "category": "Networking",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T18:35:00.000000",
    "created_by": "admin"
  },
  {
    "id": 49,
    "front": "What are CloudFront behaviors and cache policies?",
    "back": "Behaviors determine how CloudFront handles requests for different paths. Cache policies control what gets cached and for how long. Can configure different behaviors for different path patterns (e.g., /api/* vs /static/*). TTL controls cache duration.",
    "category": "Networking",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:36:00.000000",
    "created_by": "admin"
  },
  {
    "id": 50,
    "front": "What is AWS Lambda@Edge?",
    "back": "Lambda@Edge runs Lambda functions at CloudFront edge locations. Use cases: A/B testing, user authentication, image resizing, header manipulation. Triggers: Viewer request/response, Origin request/response. Limited runtime and memory compared to regular Lambda.",
    "category": "Compute",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:37:00.000000",
    "created_by": "admin"
  },
  {
    "id": 51,
    "front": "What is Amazon RDS and what database engines does it support?",
    "back": "RDS is a managed relational database service. Supported engines: MySQL, PostgreSQL, MariaDB, Oracle, SQL Server, Amazon Aurora. Features: Automated backups, patching, monitoring, Multi-AZ for high availability, Read Replicas for scaling reads.",
    "category": "Database",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T18:38:00.000000",
    "created_by": "admin"
  },
  {
    "id": 52,
    "front": "What is the difference between RDS Multi-AZ and Read Replicas?",
    "back": "Multi-AZ: Standby in different AZ for high availability, automatic failover, synchronous replication, same endpoint. Read Replicas: Separate endpoints for read scaling, asynchronous replication, can be cross-region, improves read performance.",
    "category": "Database",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:39:00.000000",
    "created_by": "admin"
  },
  {
    "id": 53,
    "front": "What is Amazon Aurora and how does it differ from regular RDS?",
    "back": "Aurora is AWS cloud-native database compatible with MySQL/PostgreSQL. Differences: 5x faster than MySQL, 3x faster than PostgreSQL, up to 15 read replicas, automatic scaling storage, shared storage architecture, higher availability and durability.",
    "category": "Database",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:40:00.000000",
    "created_by": "admin"
  },
  {
    "id": 54,
    "front": "What is Amazon ElastiCache and what engines does it support?",
    "back": "ElastiCache is a managed in-memory data store. Engines: Redis (advanced features like persistence, backups, Multi-AZ) and Memcached (simple, multi-threaded). Use cases: session storage, database caching, real-time analytics, gaming leaderboards.",
    "category": "Database",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T18:41:00.000000",
    "created_by": "admin"
  },
  {
    "id": 55,
    "front": "What are the differences between Redis and Memcached in ElastiCache?",
    "back": "Redis: Data persistence, backup/restore, Multi-AZ, read replicas, advanced data structures, pub/sub, Lua scripts. Memcached: Pure caching, multi-threaded, simpler, no persistence. Choose Redis for complex features, Memcached for simple high-performance caching.",
    "category": "Database",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:42:00.000000",
    "created_by": "admin"
  },
  {
    "id": 56,
    "front": "What is DynamoDB DAX and when should you use it?",
    "back": "DAX (DynamoDB Accelerator) is an in-memory cache for DynamoDB providing microsecond latency. Use when: You need sub-millisecond response times, have read-heavy workloads, cost of cache misses is acceptable. DAX is transparent to applications using DynamoDB APIs.",
    "category": "Database",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:43:00.000000",
    "created_by": "admin"
  },
  {
    "id": 57,
    "front": "What are DynamoDB Streams and what can trigger them?",
    "back": "DynamoDB Streams capture data modification events in DynamoDB tables. Triggers: Lambda functions, Kinesis Data Streams. Stream records contain: KEYS_ONLY, NEW_IMAGE, OLD_IMAGE, NEW_AND_OLD_IMAGES. Useful for real-time analytics, replication, notifications.",
    "category": "Database",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:44:00.000000",
    "created_by": "admin"
  },
  {
    "id": 58,
    "front": "What is a DynamoDB hot partition and how do you avoid it?",
    "back": "Hot partition occurs when one partition receives disproportionately more read/write requests. Avoid by: Using high-cardinality partition keys, adding random suffix to keys, using composite partition keys, distributing access patterns across time, using Global Tables for global distribution.",
    "category": "Database",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:45:00.000000",
    "created_by": "admin"
  },
  {
    "id": 59,
    "front": "What are DynamoDB transaction operations?",
    "back": "TransactWriteItems: Up to 25 put, update, delete, or condition check operations across multiple tables atomically. TransactGetItems: Up to 25 get operations across multiple tables. All operations succeed or all fail. Useful for ACID requirements.",
    "category": "Database",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:46:00.000000",
    "created_by": "admin"
  },
  {
    "id": 60,
    "front": "What is Amazon VPC and what are its core components?",
    "back": "VPC (Virtual Private Cloud) is logically isolated network section. Components: Subnets (public/private), Route Tables, Internet Gateway, NAT Gateway/Instance, Security Groups (stateful), NACLs (stateless), VPC Endpoints, Peering Connections.",
    "category": "Networking",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T18:47:00.000000",
    "created_by": "admin"
  },
  {
    "id": 61,
    "front": "What's the difference between Security Groups and NACLs?",
    "back": "Security Groups: Instance-level, stateful (return traffic allowed automatically), allow rules only, all rules evaluated. NACLs: Subnet-level, stateless (need explicit inbound/outbound rules), allow and deny rules, rules processed in order.",
    "category": "Networking",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:48:00.000000",
    "created_by": "admin"
  },
  {
    "id": 62,
    "front": "What are VPC Endpoints and what are the two types?",
    "back": "VPC Endpoints allow private connectivity to AWS services without internet gateway. Types: Interface Endpoints (ENI with private IP, uses PrivateLink, supports many services), Gateway Endpoints (route table entry, supports S3 and DynamoDB only).",
    "category": "Networking",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:49:00.000000",
    "created_by": "admin"
  },
  {
    "id": 63,
    "front": "What is AWS WAF and what types of attacks can it protect against?",
    "back": "WAF (Web Application Firewall) protects web applications from common exploits. Protects against: SQL injection, Cross-site scripting (XSS), DDoS attacks, IP-based attacks, geo-blocking, rate limiting. Can be deployed on CloudFront, ALB, API Gateway.",
    "category": "Security",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:50:00.000000",
    "created_by": "admin"
  },
  {
    "id": 64,
    "front": "What is the difference between Application Load Balancer and Network Load Balancer?",
    "back": "ALB: Layer 7 (HTTP/HTTPS), content-based routing, supports WebSocket, SSL termination, integrates with WAF. NLB: Layer 4 (TCP/UDP), ultra-high performance, static IP addresses, preserves source IP, handles millions of requests per second.",
    "category": "Networking",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:51:00.000000",
    "created_by": "admin"
  },
  {
    "id": 65,
    "front": "What are ALB target groups and what types of targets are supported?",
    "back": "Target groups route requests to registered targets. Supported targets: EC2 instances, IP addresses (including on-premises), Lambda functions, other ALBs. Health checks determine target availability. Can have multiple target groups per load balancer.",
    "category": "Networking",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:52:00.000000",
    "created_by": "admin"
  },
  {
    "id": 66,
    "front": "What is AWS EventBridge (CloudWatch Events) and what are its components?",
    "back": "EventBridge is serverless event bus service. Components: Event Sources (AWS services, custom apps, SaaS), Event Rules (pattern matching), Event Targets (Lambda, SQS, SNS, Kinesis). Supports custom event buses and schema registry.",
    "category": "Application Integration",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:53:00.000000",
    "created_by": "admin"
  },
  {
    "id": 67,
    "front": "What is the AWS SDK and what are its retry mechanisms?",
    "back": "AWS SDK provides APIs for AWS services in various programming languages. Retry mechanisms: Exponential backoff with jitter, configurable retry policies, different retry modes (legacy, standard, adaptive). Handles throttling, network errors, and service errors automatically.",
    "category": "Developer Tools",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:54:00.000000",
    "created_by": "admin"
  },
  {
    "id": 68,
    "front": "What are the AWS CLI credential precedence order?",
    "back": "1. Command line options, 2. Environment variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY), 3. CLI credentials file (~/.aws/credentials), 4. CLI config file (~/.aws/config), 5. Container credentials, 6. Instance profile credentials (EC2).",
    "category": "Security",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:55:00.000000",
    "created_by": "admin"
  },
  {
    "id": 69,
    "front": "What is AWS CloudTrail and what types of events does it log?",
    "back": "CloudTrail logs API calls made in your AWS account. Event types: Management events (control plane operations like CreateInstance), Data events (resource operations like S3 GetObject), Insight events (unusual activity patterns). Stores in S3 with optional CloudWatch integration.",
    "category": "Monitoring",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T18:56:00.000000",
    "created_by": "admin"
  },
  {
    "id": 70,
    "front": "What is Amazon CloudWatch Logs and how do you search logs?",
    "back": "CloudWatch Logs collects and monitors log files. Search using: Filter patterns (for real-time monitoring), CloudWatch Logs Insights (SQL-like queries for analysis), Metric filters (create metrics from log data). Supports log groups, log streams, and retention policies.",
    "category": "Monitoring",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:57:00.000000",
    "created_by": "admin"
  },
  {
    "id": 71,
    "front": "What are CloudWatch custom metrics and how do you create them?",
    "back": "Custom metrics allow you to publish application-specific metrics to CloudWatch. Create using: AWS SDK putMetricData API, CloudWatch agent, EMF (Embedded Metric Format). Can include dimensions for filtering and statistical aggregation.",
    "category": "Monitoring",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T18:58:00.000000",
    "created_by": "admin"
  },
  {
    "id": 72,
    "front": "What is AWS Config and what does it monitor?",
    "back": "Config monitors and records AWS resource configurations and changes. Tracks: Resource inventory, configuration history, configuration change notifications, compliance with rules. Can trigger remediation actions and integrates with CloudWatch and SNS.",
    "category": "Management",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T18:59:00.000000",
    "created_by": "admin"
  },
  {
    "id": 73,
    "front": "What are Lambda layers and what are their benefits?",
    "back": "Lambda layers are ZIP archives containing libraries, custom runtimes, or other dependencies. Benefits: Share code across functions, keep deployment packages small, separate core function logic from dependencies, version management, reduce cold start times.",
    "category": "Compute",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:00:00.000000",
    "created_by": "admin"
  },
  {
    "id": 74,
    "front": "What are Lambda environment variables and how are they secured?",
    "back": "Environment variables store configuration without hardcoding in code. Security: Can be encrypted at rest using KMS, automatically encrypted in transit, avoid storing sensitive data in plain text, use Secrets Manager/Parameter Store for secrets.",
    "category": "Compute",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:01:00.000000",
    "created_by": "admin"
  },
  {
    "id": 75,
    "front": "What are Lambda versions and aliases?",
    "back": "Versions are immutable snapshots of function code and configuration. Aliases are pointers to versions (e.g., PROD points to version 3). Benefits: Blue/green deployments, gradual rollouts with weighted aliases, rollback capability, environment management.",
    "category": "Compute",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:02:00.000000",
    "created_by": "admin"
  },
  {
    "id": 76,
    "front": "What are Lambda provisioned concurrency and reserved concurrency?",
    "back": "Provisioned concurrency: Pre-initialized execution environments to eliminate cold starts, costs extra. Reserved concurrency: Guarantees and limits concurrent executions for a function, prevents function from consuming all account concurrency.",
    "category": "Compute",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:03:00.000000",
    "created_by": "admin"
  },
  {
    "id": 77,
    "front": "What is Lambda@Edge vs CloudFront Functions?",
    "back": "Lambda@Edge: Full Lambda runtime, longer execution time, triggers at 4 points (viewer/origin request/response), can access network. CloudFront Functions: Lightweight JavaScript, sub-millisecond startup, viewer request/response only, no network access.",
    "category": "Compute",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:04:00.000000",
    "created_by": "admin"
  },
  {
    "id": 78,
    "front": "What is EC2 Auto Scaling and what are its scaling policies?",
    "back": "Auto Scaling automatically adjusts EC2 capacity. Scaling policies: Target Tracking (maintain metric target), Step Scaling (scale based on CloudWatch alarms), Simple Scaling (legacy), Scheduled Scaling (predictable patterns), Predictive Scaling (ML-based).",
    "category": "Compute",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:05:00.000000",
    "created_by": "admin"
  },
  {
    "id": 79,
    "front": "What are EC2 placement groups and their types?",
    "back": "Placement groups control EC2 instance placement. Types: Cluster (low latency, high network performance, single AZ), Partition (spread across logical partitions, different hardware), Spread (instances on distinct hardware, max 7 per AZ).",
    "category": "Compute",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:06:00.000000",
    "created_by": "admin"
  },
  {
    "id": 80,
    "front": "What is Amazon Route 53 and what routing policies does it support?",
    "back": "Route 53 is AWS DNS service. Routing policies: Simple (single resource), Weighted (distribute traffic by weight), Latency-based (lowest latency), Failover (active-passive), Geolocation (by user location), Geoproximity (by geographic distance), Multivalue (multiple healthy resources).",
    "category": "Networking",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:07:00.000000",
    "created_by": "admin"
  },
  {
    "id": 81,
    "front": "What are the advantages of serverless architecture?",
    "back": "No server management, automatic scaling, pay-per-use pricing, built-in high availability, faster time to market, focus on business logic, automatic patching and updates, integration with other AWS services.",
    "category": "Architecture",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T19:08:00.000000",
    "created_by": "admin"
  },
  {
    "id": 82,
    "front": "What are some serverless anti-patterns?",
    "back": "Long-running processes (>15 minutes), stateful applications, high-frequency polling, complex application logic in single function, tight coupling between functions, using RDS without RDS Proxy, not using appropriate triggers.",
    "category": "Architecture",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:09:00.000000",
    "created_by": "admin"
  },
  {
    "id": 83,
    "front": "What is the 12-Factor App methodology and how does it apply to AWS?",
    "back": "12-Factor principles for cloud-native apps: Codebase (single repo), Dependencies (explicit), Config (environment variables), Backing services (attached resources), Build/release/run separation, Processes (stateless), Port binding, Concurrency, Disposability, Dev/prod parity, Logs (streams), Admin processes.",
    "category": "Architecture",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:10:00.000000",
    "created_by": "admin"
  },
  {
    "id": 84,
    "front": "What are the different API Gateway throttling types?",
    "back": "Account-level throttling (10,000 RPS default), Stage-level throttling, Method-level throttling, Usage plan throttling (for API keys). Returns 429 Too Many Requests when exceeded. Can be increased via AWS support. Implements token bucket algorithm.",
    "category": "Networking",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:11:00.000000",
    "created_by": "admin"
  },
  {
    "id": 85,
    "front": "What are API Gateway authorizers?",
    "back": "Lambda authorizers (custom logic returning IAM policy), Cognito User Pool authorizers (JWT token validation), IAM authorizers (AWS signature v4). Can cache authorization results for performance. Returns 401 for authentication failures, 403 for authorization failures.",
    "category": "Security",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:12:00.000000",
    "created_by": "admin"
  },
  {
    "id": 86,
    "front": "What is CORS and how do you configure it in API Gateway?",
    "back": "CORS (Cross-Origin Resource Sharing) allows web browsers to make requests to different domains. In API Gateway: Enable CORS on methods, configure allowed origins/headers/methods, handle preflight OPTIONS requests. Required for browser-based applications calling APIs.",
    "category": "Security",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:13:00.000000",
    "created_by": "admin"
  },
  {
    "id": 87,
    "front": "What are common Lambda error types and how do you handle them?",
    "back": "Function errors (uncaught exceptions), timeout errors (execution time > timeout), memory errors (out of memory), runtime errors (runtime not available). Handle with: try/catch blocks, dead letter queues, CloudWatch alarms, X-Ray tracing, proper logging.",
    "category": "Troubleshooting",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:14:00.000000",
    "created_by": "admin"
  },
  {
    "id": 88,
    "front": "What is Lambda cold start and how can you minimize it?",
    "back": "Cold start is initialization time for new execution environments. Minimize with: Provisioned concurrency, smaller deployment packages, avoid unnecessary dependencies, optimize initialization code, use container image instead of ZIP, connection pooling.",
    "category": "Optimization",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:15:00.000000",
    "created_by": "admin"
  },
  {
    "id": 89,
    "front": "What are DynamoDB best practices for performance?",
    "back": "Use burst capacity wisely, distribute partition keys evenly, avoid hot partitions, use sparse indexes, batch operations when possible, implement exponential backoff for retries, use parallel scans, choose appropriate consistency model.",
    "category": "Optimization",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:16:00.000000",
    "created_by": "admin"
  },
  {
    "id": 90,
    "front": "What are the AWS Well-Architected Framework pillars?",
    "back": "1. Operational Excellence (run and monitor systems), 2. Security (protect information and systems), 3. Reliability (recover from failures), 4. Performance Efficiency (use resources efficiently), 5. Cost Optimization (avoid unnecessary costs), 6. Sustainability (minimize environmental impact).",
    "category": "Architecture",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:17:00.000000",
    "created_by": "admin"
  },
  {
    "id": 91,
    "front": "What is infrastructure as code and what tools does AWS provide?",
    "back": "IaC manages infrastructure through code rather than manual processes. AWS tools: CloudFormation (declarative templates), CDK (programmatic infrastructure), Terraform (third-party), SAM (serverless applications). Benefits: version control, reproducibility, automation.",
    "category": "DevOps",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:18:00.000000",
    "created_by": "admin"
  },
  {
    "id": 92,
    "front": "What are CloudFormation stack operations?",
    "back": "Create (new stack), Update (modify existing), Delete (remove stack), Import (import existing resources), Detect drift (compare actual vs template), Rollback (revert to previous state), Continue rollback (retry failed rollback).",
    "category": "DevOps",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:19:00.000000",
    "created_by": "admin"
  },
  {
    "id": 93,
    "front": "What is the difference between CloudFormation and CDK?",
    "back": "CloudFormation: JSON/YAML templates, declarative, AWS-native, direct deployment. CDK: Programming languages (TypeScript, Python, Java, etc.), generates CloudFormation, higher-level constructs, better IDE support, more expressive.",
    "category": "DevOps",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:20:00.000000",
    "created_by": "admin"
  },
  {
    "id": 94,
    "front": "What are some common AWS service limits developers should know?",
    "back": "Lambda: 15 min timeout, 10GB memory, 1000 concurrent executions (default). API Gateway: 10,000 RPS, 10MB payload. DynamoDB: 400KB item size, 25 items per batch. S3: 5TB object size, unlimited storage. Most limits can be increased via support.",
    "category": "Limits",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:21:00.000000",
    "created_by": "admin"
  },
  {
    "id": 95,
    "front": "What is the difference between horizontal and vertical scaling?",
    "back": "Horizontal scaling (scale out): Add more instances to handle load, better fault tolerance, more complex architecture. Vertical scaling (scale up): Increase instance size/power, simpler architecture, limited by instance types, single point of failure.",
    "category": "Architecture",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T19:22:00.000000",
    "created_by": "admin"
  },
  {
    "id": 96,
    "front": "What are microservices and what AWS services support them?",
    "back": "Microservices: Small, independent services communicating via APIs. AWS services: ECS/EKS (containers), Lambda (serverless), API Gateway (API management), Service Mesh (App Mesh), Service Discovery (Cloud Map), Load Balancers.",
    "category": "Architecture",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:23:00.000000",
    "created_by": "admin"
  },
  {
    "id": 97,
    "front": "What is eventual consistency vs strong consistency?",
    "back": "Eventual consistency: System will become consistent over time, but may return stale data immediately after writes. Strong consistency: Always returns most recent write, but higher latency and cost. DynamoDB supports both models.",
    "category": "Database",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:24:00.000000",
    "created_by": "admin"
  },
  {
    "id": 98,
    "front": "What are some common causes of DynamoDB throttling?",
    "back": "Hot partitions (uneven key distribution), insufficient provisioned capacity, burst capacity exhaustion, large items consuming more capacity units, GSI throttling affecting main table, scanning instead of querying.",
    "category": "Troubleshooting",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:25:00.000000",
    "created_by": "admin"
  },
  {
    "id": 99,
    "front": "What is the difference between PUT and PATCH in REST APIs?",
    "back": "PUT: Replaces entire resource with provided data, idempotent, requires complete resource representation. PATCH: Partial update of resource, may or may not be idempotent, requires only changed fields. Both supported in API Gateway.",
    "category": "API Design",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:26:00.000000",
    "created_by": "admin"
  },
  {
    "id": 100,
    "front": "What are some best practices for error handling in serverless applications?",
    "back": "Use structured logging, implement circuit breakers, graceful degradation, proper HTTP status codes, dead letter queues, exponential backoff with jitter, monitor error rates, use correlation IDs for tracing.",
    "category": "Best Practices",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:27:00.000000",
    "created_by": "admin"
  },
  {
    "id": 101,
    "front": "What is AWS CodeStar and what does it provide?",
    "back": "CodeStar provides unified interface for software development activities. Includes: Project templates, integrated toolchain (CodeCommit, CodeBuild, CodeDeploy, CodePipeline), team management, dashboard for monitoring, pre-configured development environments.",
    "category": "Developer Tools",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T19:28:00.000000",
    "created_by": "admin"
  },
  {
    "id": 102,
    "front": "What is AWS CodeArtifact?",
    "back": "CodeArtifact is a managed artifact repository service for storing and sharing software packages. Supports: npm, PyPI, Maven, NuGet. Features: upstream repositories, package versioning, access control, integration with CI/CD pipelines.",
    "category": "Developer Tools",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:29:00.000000",
    "created_by": "admin"
  },
  {
    "id": 103,
    "front": "What is Amazon OpenSearch (Elasticsearch) and its use cases?",
    "back": "OpenSearch is a search and analytics engine. Use cases: Full-text search, log analytics, application monitoring, clickstream analytics, security analytics. Features: RESTful APIs, real-time indexing, visualization with dashboards.",
    "category": "Analytics",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:30:00.000000",
    "created_by": "admin"
  },
  {
    "id": 104,
    "front": "What is the difference between SQS and SNS?",
    "back": "SQS: Point-to-point messaging, messages stored in queue until consumed, pull-based, guaranteed delivery. SNS: Pub/sub messaging, messages sent to multiple subscribers, push-based, fire-and-forget. Often used together in fan-out pattern.",
    "category": "Application Integration",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:31:00.000000",
    "created_by": "admin"
  },
  {
    "id": 105,
    "front": "What are SQS message attributes and system attributes?",
    "back": "Message attributes: Custom metadata (key-value pairs) sent with message, up to 10 attributes, don't count toward message size. System attributes: AWS-provided metadata like message ID, receipt handle, MD5 hash, timestamps.",
    "category": "Application Integration",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:32:00.000000",
    "created_by": "admin"
  },
  {
    "id": 106,
    "front": "What is AWS AppSync and what are its data sources?",
    "back": "AppSync is a managed GraphQL service. Data sources: DynamoDB, Lambda, OpenSearch, RDS, HTTP endpoints, None (local resolvers). Features: Real-time subscriptions, offline sync, fine-grained access control, caching.",
    "category": "Application Integration",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:33:00.000000",
    "created_by": "admin"
  },
  {
    "id": 107,
    "front": "What is the difference between OAuth 2.0 and SAML?",
    "back": "OAuth 2.0: Authorization framework for API access, token-based, RESTful, mobile-friendly. SAML: Authentication and authorization, XML-based, enterprise SSO, more complex. Cognito supports both for different use cases.",
    "category": "Security",
    "difficulty": "hard",
    "tags": [],
    "created_date": "2025-05-28T19:34:00.000000",
    "created_by": "admin"
  },
  {
    "id": 108,
    "front": "What are JWT tokens and how does Cognito use them?",
    "back": "JWT (JSON Web Tokens) are self-contained tokens for securely transmitting information. Cognito issues: ID token (user identity), Access token (resource access), Refresh token (obtain new tokens). Tokens are signed and can be verified without calling Cognito.",
    "category": "Security",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:35:00.000000",
    "created_by": "admin"
  },
  {
    "id": 109,
    "front": "What is AWS CloudShell?",
    "back": "CloudShell is a browser-based shell with AWS CLI, SDKs, and common tools pre-installed. Features: 1GB persistent storage, no additional charges, pre-authenticated with your AWS credentials, supports multiple regions, includes popular development tools.",
    "category": "Developer Tools",
    "difficulty": "easy",
    "tags": [],
    "created_date": "2025-05-28T19:36:00.000000",
    "created_by": "admin"
  },
  {
    "id": 110,
    "front": "What are the benefits of using container images for Lambda functions?",
    "back": "Larger deployment packages (up to 10GB), familiar Docker tooling, easier local testing, support for any runtime, better dependency management, consistent environments across development and production, easier CI/CD integration.",
    "category": "Compute",
    "difficulty": "medium",
    "tags": [],
    "created_date": "2025-05-28T19:37:00.000000",
    "created_by": "admin"
  }
]